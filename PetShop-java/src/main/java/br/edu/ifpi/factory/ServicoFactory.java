package br.edu.ifpi.factory;

import br.edu.ifpi.Model.Servico;
import br.edu.ifpi.Model.Banho;
import br.edu.ifpi.Model.Tosa;
import br.edu.ifpi.Model.ServicoPadrao;

/**
 * üè≠ Factory Method para cria√ß√£o de Servi√ßos
 * Padr√£o de Projeto: Factory Method
 * 
 * Vantagens:
 * - Centraliza a cria√ß√£o de servi√ßos
 * - Facilita a manuten√ß√£o e expans√£o
 * - Reduz duplica√ß√£o de c√≥digo
 */
public class ServicoFactory {
    
    /**
     * Cria um servi√ßo baseado no tipo informado
     * 
     * @param tipo tipo do servi√ßo (banho, tosa, vacina, etc)
     * @param preco valor do servi√ßo
     * @return inst√¢ncia de Servico
     */
    public static Servico criarServico(String tipo, double preco) {
        if (tipo == null || tipo.trim().isEmpty()) {
            throw new IllegalArgumentException("Tipo de servi√ßo n√£o pode ser vazio");
        }
        
        if (preco <= 0) {
            throw new IllegalArgumentException("Pre√ßo deve ser maior que zero");
        }
        
        Servico servico;
        
        switch (tipo.toLowerCase().trim()) {
            case "banho", "bath", "higiene" -> servico = new Banho();
            case "tosa", "grooming", "corte", "tosquia" -> servico = new Tosa();
            default -> servico = new ServicoPadrao();
        }
        
        servico.setTipo(tipo);
        servico.setPreco(preco);
        
        return servico;
    }
    
    /**
     * Cria um servi√ßo com pre√ßo padr√£o baseado no tipo
     * 
     * @param tipo tipo do servi√ßo
     * @return inst√¢ncia de Servico com pre√ßo padr√£o
     */
    public static Servico criarServicoComPrecosPadrao(String tipo) {
        if (tipo == null || tipo.trim().isEmpty()) {
            throw new IllegalArgumentException("Tipo de servi√ßo n√£o pode ser vazio");
        }
        
        double precoPadrao = switch (tipo.toLowerCase().trim()) {
            case "banho", "bath", "higiene" -> 50.0;
            case "tosa", "grooming", "corte", "tosquia" -> 80.0;
            case "vacina", "vaccine" -> 100.0;
            case "consulta", "checkup" -> 120.0;
            default -> 60.0;
        };
        
        return criarServico(tipo, precoPadrao);
    }
    
    /**
     * Lista os tipos de servi√ßos especializados dispon√≠veis
     * 
     * @return array com os tipos de servi√ßos especializados
     */
    public static String[] tiposEspecializados() {
        return new String[]{"banho", "tosa"};
    }
}
